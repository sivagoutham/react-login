{"version":3,"sources":["logo.svg","components/Input/input-component.js","components/Login/login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","props","val","data","style","className","htmlFor","text","type","onChange","handleChange","name","validName","RegExp","validEmailRegex","validPassword","Login","event","preventDefault","target","value","errors","state","firstNameValid","firstName","lastNameValid","lastName","emailValid","email","passwordValid","password","length","test","setState","this","Fragment","padding","onSubmit","handleSubmit","float","marginRight","width","clear","href","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20aab022.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst Input = (props)=>{\r\n  let val =  props.data\r\n    return(\r\n        <div style={props.style}>\r\n                <label className='styleLabel' htmlFor={props.text}>{props.text}</label>\r\n                <input className='textboxStyle'\r\n                  type={props.type}\r\n                  onChange={props.handleChange}\r\n                  name= {props.text}\r\n                /> \r\n                <span className='error'>{val}</span>\r\n                \r\n              </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React, { Component } from \"react\";\r\nimport Input from '../Input/input-component';\r\n\r\nimport \"./login.css\";\r\n\r\nconst validName = RegExp(/^[A-Za-z]+$/)\r\nconst validEmailRegex = RegExp(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/);\r\nconst validPassword = RegExp(/^[0-9a-zA-Z]+$/)\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      firstName: null,\r\n      lastName: null,\r\n      email: null,\r\n      password : null,\r\n      errors:{\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        password : '',\r\n      }\r\n    };\r\n    this.validName = RegExp();\r\n    }\r\n  \r\n\r\n  handleChange = (event)=>{\r\n    event.preventDefault();\r\n    const {name, value} = event.target;\r\n    let errors = this.state.errors;\r\n    let firstNameValid = errors.firstName;\r\n    let lastNameValid = errors.lastName;\r\n    let emailValid = errors.email;\r\n    let passwordValid = errors.password\r\n    \r\n    if(value.length>0){\r\n      switch (name) {\r\n        case 'First Name':\r\n        firstNameValid = validName.test(value)\r\n          errors.firstName =  firstNameValid? '':'Name is not valid!'\r\n          break;\r\n          case 'Last Name':\r\n        lastNameValid = validName.test(value)\r\n          errors.lastName =  lastNameValid? '':'Name is not valid!'\r\n          break;\r\n        case 'Email address': \r\n        emailValid = validEmailRegex.test(value)\r\n          errors.email =  emailValid? '':'Email is not valid!'\r\n          break;\r\n        case 'Password':\r\n          if(value.length>8){\r\n            passwordValid = validPassword.test(value)\r\n          errors.password =  passwordValid? '':'Password is not valid!'\r\n          }else{\r\n            errors.password = 'Password must be 8 characters long!'\r\n          }\r\n        \r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      \r\n    }else{\r\n      errors.firstName ='';\r\n    errors.lastName='';\r\n    errors.email ='';\r\n    errors.password=''\r\n    }\r\n    this.setState({errors, [name]: value});\r\n\r\n    \r\n\r\n  }\r\n\r\n  render() {\r\n    const {errors} = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"center\">\r\n          <h3 className=\"header\">Get started today!</h3>\r\n          <form style={{padding:'10px'}} onSubmit={this.handleSubmit}>\r\n\r\n            <div style={{padding:'10px'}}>\r\n              <Input text ={'First Name'} \r\n              type = {'text'}\r\n              style={{ float: \"left\", marginRight: \"20px\",width:'45%' }}\r\n              handleChange = {this.handleChange}\r\n              data = {errors.firstName}\r\n              />\r\n            \r\n\r\n              <Input text ={'Last Name'} type = {'text'} style={{ float: \"left\"}} handleChange = {this.handleChange} data = {errors.lastName}/>\r\n\r\n              <br style={{ clear: \"both\" }} />\r\n            </div>\r\n            <div style={{padding:'10px'}}>\r\n              <Input text ={'Email address'} type= {'email'} style={{ float: \"left\", marginRight: \"20px\",width:'45%' }} handleChange = {this.handleChange} data = {errors.email}/>\r\n\r\n              <Input text ={'Password'} type = {'password'} style={{ float: \"left\"}} handleChange = {this.handleChange} data = {errors.password}/>\r\n              <br style={{ clear: \"both\" }} />\r\n            </div>\r\n            <div className ='divStyle'>\r\n              <button className=\"button\" type=\"submit\" value=\"\" >Claim Your Free Trial\r\n              <div className=\"triangle-right\"></div>\r\n              </button>\r\n            </div>\r\n            <p className='terms'>You are agreeing to our <a className = 'anchorTag' href=\"https://sivagoutham.github.io/react-login/\">Terms and Services</a></p>\r\n          </form>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Login from './components/Login/login'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Login/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}