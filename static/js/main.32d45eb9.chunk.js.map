{"version":3,"sources":["logo.svg","components/Input/input-component.js","components/Login/login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","props","style","className","htmlFor","text","id","type","value","onChange","handleChange","name","Login","state","Fragment","padding","onSubmit","this","handleSubmit","float","marginRight","width","clear","href","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8IAAAA,EAAOC,QAAU,IAA0B,kC,mKCiB5BC,EAfD,SAACC,GACX,OACI,yBAAKC,MAAOD,EAAMC,OACV,2BAAOC,UAAU,aAAaC,QAAQ,QAAQH,EAAMI,MACpD,2BAAOF,UAAU,eACfG,GAAG,OACHC,KAAK,OACLC,MAAOP,EAAMO,MACbC,SAAUR,EAAMS,aAChBC,KAAK,WCwBRC,G,kBA7Bb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KACDY,MAAQ,CAAEL,MAAO,IAFL,E,sEAKjB,OACE,kBAAC,IAAMM,SAAP,KACE,yBAAKX,UAAU,UACb,wBAAIA,UAAU,UAAd,sBACA,0BAAMD,MAAO,CAACa,QAAQ,QAASC,SAAUC,KAAKC,cAC5C,yBAAKhB,MAAO,CAACa,QAAQ,SACnB,kBAAC,EAAD,CAAOV,KAAO,aAAcH,MAAO,CAAEiB,MAAO,OAAQC,YAAa,OAAOC,MAAM,SAC9E,kBAAC,EAAD,CAAOhB,KAAO,YAAaH,MAAO,CAAEiB,MAAO,UAC3C,wBAAIjB,MAAO,CAAEoB,MAAO,WAEtB,yBAAKpB,MAAO,CAACa,QAAQ,SACnB,kBAAC,EAAD,CAAOV,KAAO,gBAAiBH,MAAO,CAAEiB,MAAO,OAAQC,YAAa,OAAOC,MAAM,SACjF,kBAAC,EAAD,CAAOhB,KAAO,WAAYH,MAAO,CAAEiB,MAAO,UAC1C,wBAAIjB,MAAO,CAAEoB,MAAO,WAEtB,yBAAKnB,UAAW,YAAW,4BAAQA,UAAU,SAASI,KAAK,SAASC,MAAM,IAA/C,wBAAwE,yBAAKL,UAAU,qBAClH,uBAAGA,UAAU,SAAb,2BAA6C,uBAAGA,UAAY,YAAYoB,KAAK,8CAAhC,8B,GAtBrCC,cCOLC,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCKcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.32d45eb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst Input = (props)=>{\r\n    return(\r\n        <div style={props.style}>\r\n                <label className='styleLabel' htmlFor=\"name\">{props.text}</label>\r\n                <input className='textboxStyle'\r\n                  id=\"name\"\r\n                  type=\"text\"\r\n                  value={props.value}\r\n                  onChange={props.handleChange}\r\n                  name=\"name\"\r\n                />\r\n              </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React, { Component } from \"react\";\r\nimport Input from '../Input/input-component';\r\n\r\nimport \"./login.css\";\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\" };\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"center\">\r\n          <h3 className=\"header\">Get started today!</h3>\r\n          <form style={{padding:'10px'}} onSubmit={this.handleSubmit}>\r\n            <div style={{padding:'10px'}}>\r\n              <Input text ={'First Name'} style={{ float: \"left\", marginRight: \"20px\",width:'45%' }}/>\r\n              <Input text ={'Last Name'} style={{ float: \"left\"}}/>\r\n              <br style={{ clear: \"both\" }} />\r\n            </div>\r\n            <div style={{padding:'10px'}}>\r\n              <Input text ={'Email address'} style={{ float: \"left\", marginRight: \"20px\",width:'45%' }}/>\r\n              <Input text ={'Password'} style={{ float: \"left\"}}/>\r\n              <br style={{ clear: \"both\" }} />\r\n            </div>\r\n            <div className ='divStyle'><button className=\"button\" type=\"submit\" value=\"\" >Claim Your Free Trial<div className=\"triangle-right\"></div></button></div>\r\n            <p className='terms'>You are agreeing to our <a className = 'anchorTag' href=\"https://sivagoutham.github.io/react-login/\">Terms and Services</a></p>\r\n          </form>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Login from './components/Login/login'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Login/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}